from os import path
import re
import sys
import datetime
import logging
from functools import partial
from enum import Enum, IntEnum, auto

from database import Barahl0botDatabase
from settings import Barahl0botSettings
from vkontakte import VkontakteInfoGetter
from structures import Album, Group

from telegram.ext import \
    Updater, CommandHandler, ConversationHandler, Handler, MessageHandler, Filters, CallbackQueryHandler
import telegram.ext
from telegram import InlineKeyboardMarkup, InlineKeyboardButton
from vk_api.exceptions import ApiError

__author__ = 'fut33v'

_LOGGER = logging.getLogger("barahl0bot")
_LOGS_DIR = 'log'
_FH_DEBUG = None
_FH_ERROR = None

REGEXP_ALBUM = re.compile("http[s]?://vk.com/album(-?\d*)_(\d*)")


def send_message(update, context, message_text, reply_markup=None):
    return context.bot.send_message(chat_id=update.effective_chat.id,
                                    text=message_text,
                                    parse_mode=telegram.ParseMode.MARKDOWN,
                                    reply_markup=reply_markup)


def start_handler(update, context):
    message_text = """
    
    –° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –º–æ–∂–Ω–æ: 
    
    + –¥–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –∫–∞–Ω–∞–ª *@{channel}* (/postitem), 
    + —É–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–ª—å–±–æ–º–æ–≤-–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞. 

    *Github:* https://github.com/fut33v/barahl0bot

    *–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞:* @fut33v
    
""".format(channel=_CHANNEL)

    keyboard = [[InlineKeyboardButton(CallbackDataEnum.POSTITEM.value, callback_data=CallbackDataEnum.POSTITEM.name)]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    message = context.bot.send_message(chat_id=update.effective_chat.id,
                                       text=message_text,
                                       reply_markup=reply_markup,
                                       parse_mode=telegram.ParseMode.MARKDOWN)

    save_message_id(update, message)


def get_albums_handler(update, context):
    response = "–°–µ–≥–æ–¥–Ω—è –±–µ–∑ –∞–ª—å–±–æ–º–æ–≤, –±—Ä–∞—Ç–∞–Ω."
    albums = _DATABASE.get_albums_list()
    if albums:
        response = ""
        for a in albums:
            response += a.build_url() + "\n"

    context.bot.send_message(update.effective_chat.id, response, disable_web_page_preview=True)


def add_album_handler(update, context):
    if len(context.args) == 0:
        return
    if update.effective_user.username not in _SETTINGS.admins:
        return
    for album_candidate in context.args:
        m = REGEXP_ALBUM.match(album_candidate)
        if m:
            album = Album(m.group(1), m.group(2))
            if _DATABASE.is_album_in_table(album):
                response = "–ù–µ, —Ç–∞–∫–æ–π –∞–ª—å–±–æ–º ({}) –µ—Å—Ç—å —É–∂–µ.".format(album_candidate)
            else:
                try:
                    _VK_INFO_GETTER.update_album_info(album)
                    # insert group in table if not exists
                    if album.owner_id < 0:
                        if not _DATABASE.is_group_in_table_by_id(album.owner_id):
                            groups = _VK_INFO_GETTER.get_groups([abs(album.owner_id)])
                            if groups:
                                _DATABASE.insert_group(groups[0])
                    # insert album
                    _DATABASE.insert_album(album)
                    response = "–ê–ª—å–±–æ–º <b>{}</b> –¥–æ–±–∞–≤–ª–µ–Ω.\n".format(album.title, album_candidate)
                except ApiError as e:
                    response = "–ö–æ–¥ –æ—à–∏–±–∫–∏ VK API {}: {}".format(e.error['error_code'], e.error['error_msg'])
        else:
            response = "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å—Å—ã–ª–∫—É <s>({})</s>".format(album_candidate)

        context.bot.send_message(update.effective_chat.id, response, parse_mode=telegram.ParseMode.HTML)


def remove_album_handler(update, context):
    if len(context.args) == 0:
        return
    if update.effective_user.username not in _SETTINGS.admins:
        return
    for album_candidate in context.args:
        print(album_candidate)
        m = REGEXP_ALBUM.match(album_candidate)
        if m:
            album = Album(m.group(1), m.group(2))
            if not _DATABASE.is_album_in_table(album):
                response = "–¢–∞–∫–æ–≥–æ –∞–ª—å–±–æ–º–∞ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ –±—ã–ª–æ."
            else:
                _DATABASE.delete_album(album)
                response = "–£–¥–∞–ª–∏–ª –∞–ª—å–±–æ–º\n{}".format(album_candidate)
        else:
            response = "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å—Å—ã–ª–∫—É <s>({}</s>)".format(album_candidate)

        context.bot.send_message(update.effective_chat.id, response, parse_mode=telegram.ParseMode.HTML)


class Chat:
    def __init__(self, chat_id):
        self.chat_id = chat_id
        self.user_id = None
        self.prev_message_id = None
        self.user_state = None

        self.photo_message = None
        self.currency = None
        self.price = None
        self.ship = None
        self.city = None
        self.caption = None
        self.description = None


class UserState(Enum):
    CHILLING = 0
    WAITING_FOR_CATEGORY = 1
    WAITING_FOR_PHOTO = 2
    WAITING_FOR_CURRENCY = 3
    WAITING_FOR_PRICE = 4
    WAITING_FOR_SHIP = 5
    WAITING_FOR_CITY = 6
    WAITING_FOR_CAPTION = 7
    WAITING_FOR_DESCRIPTION = 8
    WAITING_FOR_APPROVE = 9

    WAITING_FOR_BICYCLE = 20
    WAITING_FOR_COMPONENT = 21


class CategoryEnum(Enum):
    BICYCLE = "–í–µ–ª–æ—Å–∏–ø–µ–¥"
    COMPONENTS = "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã"
    WHEELS = "–ö–æ–ª–µ—Å–∞ –∏ –ø–æ–∫—Ä—ã—à–∫–∏"
    SERVICE = "–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ"
    ACCESSORIES = "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã"
    CLOTHES = "–û–¥–µ–∂–¥–∞"
    SHOES = "–û–±—É–≤—å"
    HELMETS = "–®–ª–µ–º—ã"
    BAGS = "–°—É–º–∫–∏"


class BicycleCategoryEnum(Enum):
    ROAD = "–®–æ—Å—Å–µ—Ä"
    CYCLOCROSS = "–¶–∏–∫–ª–æ–∫—Ä–æ—Å—Å"
    FIX = "–§–∏–∫—Å"
    SINGLE = "–°–∏–Ω–≥–ª—Å–ø–∏–¥"
    GRAVEL = "–ì—Ä–µ–≤–µ–ª"
    TOURING = "–¢—É—Ä–∏–Ω–≥"


class ComponentCategoryEnum(Enum):
    FRAME = "–†–∞–º–∞"
    FORK = "–í–∏–ª–∫–∞"
    BRAKES = "–¢–æ—Ä–º–æ–∑–∞"
    STEERING = "–†—É–ª–µ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"
    SADDLES = "–°–µ–¥–ª–∞ –∏ —à—Ç—ã—Ä–∏"
    TRANSMISSION = "–¢—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è"
    PEDALS = "–ü–µ–¥–∞–ª–∏ –∏ —à–∏–ø—ã"


class WheelsCategoryEnum(Enum):
    WHEELS = "–ö–æ–ª–µ—Å–∞"
    HUBS = "–í—Ç—É–ª–∫–∏"
    TIRES = "–ü–æ–∫—Ä—ã—à–∫–∏"
    RIMS = "–û–±–æ–¥–∞"
    TUBES = "–ö–∞–º–µ—Ä—ã"
    SPOKES = "–°–ø–∏—Ü—ã"


class ServiceCategoryEnum(Enum):
    PUMPS = "–ù–∞—Å–æ—Å—ã"
    TOOLS = "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"
    WORKSTAND = "–°—Ç–æ–π–∫–∏ –∏ —Å—Ç–µ–Ω–¥—ã"


class AccessoriesCategoryEnum(Enum):
    GLASSES = "–û—á–∫–∏"
    LOCK = "–ó–∞–º–∫–∏"
    LIGHT = "–§–æ–Ω–∞—Ä–∏"
    BOTTLE = "–§–ª—è–≥–∏ –∏ —Ñ–ª—è–≥–æ–¥–µ—Ä–∂–∞—Ç–µ–ª–∏"
    COMPUTER = "–í–µ–ª–æ–∫–æ–º–ø—ã"
    MUDGUARD = "–ö—Ä—ã–ª—å—è"
    RACK = "–ë–∞–≥–∞–∂–Ω–∏–∫–∏"
    TRAINER = "–°—Ç–∞–Ω–∫–∏"


class BagsCategoryEnum(Enum):
    CASE = "–ß–µ—Ö–ª—ã –∏ –±–æ–∫—Å—ã"
    BAUL = "–ë–∞—É–ª—ã"
    ROLLTOP = "–†–æ–ª–ª—Ç–æ–ø—ã"
    MESSENGER = "–ú–µ—Å—Å–µ–Ω–¥–∂–µ—Ä—ã"
    STEERING_BAG = "–ù–∞—Ä—É–ª—å–Ω—ã–µ —Å—É–º–∫–∏"
    WAIST_BAG = "–ü–æ—è—Å–Ω—ã–µ —Å—É–º–∫–∏"


class PhotoOrAlbumEnum(Enum):
    PHOTO = "–æ–¥–Ω–∞ —Ñ–æ—Ç–∫–∞"
    ALBUM = "–∞–ª—å–±–æ–º"


class CurrencyEnum(Enum):
    RUB = 'RUB ‚ÇΩ'
    USD = 'USD $'
    EUR = 'EUR ‚Ç¨'
    UAH = 'UAH '


class ShippingEnum(Enum):
    DO_NOT_SHIP = "–ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é!"
    WILL_SHIP = "–•–æ—Ç—å –Ω–∞ –ª—É–Ω—É)"


class CallbackDataEnum(Enum):
    POSTITEM = '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä'
    BACK = '–ù–∞–∑–∞–¥'
    DONE = "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"
    CANCEL = '–û—Ç–º–µ–Ω–∞'
    CITY_OTHER = '–î—Ä—É–≥–æ–π'
    CITY = 'City'


HASHTAGS = {
    BicycleCategoryEnum.ROAD: "road",
    BicycleCategoryEnum.CYCLOCROSS: "cx",
    BicycleCategoryEnum.FIX: "fix",
    BicycleCategoryEnum.SINGLE: "single",
    BicycleCategoryEnum.GRAVEL: "gravel",
    BicycleCategoryEnum.TOURING: "touring",
    CategoryEnum.BICYCLE: "complete",
    CategoryEnum.COMPONENTS: "components",
    CategoryEnum.HELMETS: "helmet",
    CategoryEnum.SHOES: "shoes",
    CategoryEnum.CLOTHES: "clothes",
    CategoryEnum.BAGS: "bags",
    CategoryEnum.ACCESSORIES: "accessories",
    CategoryEnum.SERVICE: "service",
    CategoryEnum.WHEELS: "wheels",
}

CHATS_DICT = {}
POSTFIX_CANCEL = "\n/cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."


def get_top_cities():
    return _DATABASE.get_top_cities(10)


def category_message_text(category=None):
    message_text = """
        üö¥‚Äç‚ôÇÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è. 

–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç —Ç–µ–±–µ. 
–ü—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ–º–æ–∂–µ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—é –±—ã—Å—Ç—Ä–µ–µ –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä. 

‚û°Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ *–í–µ–ª–æ—Å–∏–ø–µ–¥—ã, –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã, –ö–æ–ª–µ—Å–∞ –∏ –ø–æ–∫—Ä—ã—à–∫–∏, –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ, –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã, –°—É–º–∫–∏* –∏–º–µ—é—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏. 
*–û–¥–µ–∂–¥–∞* - –¥–∂–µ—Ä—Å–∏, –±–∏–±—ã, –∫–µ–ø–∫–∏, —Ä—É–∫–∞–≤–∞, –Ω–æ—Å–∫–∏, –ø–µ—Ä—á–∞—Ç–∫–∏, –∫—É—Ä—Ç–∫–∏, –±–∞—Ñ—ã. 
*–û–±—É–≤—å* - –≤–µ–ª–æ—Ç—É—Ñ–ª–∏, –±–∞—Ö–∏–ª—ã. 
*–®–ª–µ–º—ã* - —à–ª–µ–º—ã, –≤–∏–∑–æ—Ä—ã.
"""
    if category:
        message_text = "{}\n ‚û°Ô∏è *{}*\n {}".format(message_text, category.value, POSTFIX_CANCEL)
    else:
        message_text = message_text + POSTFIX_CANCEL

    return message_text


def photo_message_text():
    message_text = """
üì∑ –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–≤–∞—Ä–∞. 
–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É (–ø–æ–∫–∞) —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. 
"""
    return message_text


def get_chat(update):
    return CHATS_DICT[update.effective_chat.id]


def save_current_state(update, state):
    if update.effective_chat.id not in CHATS_DICT:
        CHATS_DICT[update.effective_chat.id] = Chat(update.effective_chat.id)
    CHATS_DICT[update.effective_chat.id].user_state = state


def get_current_state(update):
    if update.effective_chat.id not in CHATS_DICT:
        return None
    return CHATS_DICT[update.effective_chat.id].user_state


def save_message_id(update, message):
    if update.effective_chat.id not in CHATS_DICT:
        CHATS_DICT[update.effective_chat.id] = Chat(update.effective_chat.id)
    CHATS_DICT[update.effective_chat.id].prev_message_id = message.message_id


def save_photo_message(update):
    if update.effective_chat.id not in CHATS_DICT:
        CHATS_DICT[update.effective_chat.id] = Chat(update.effective_chat.id)
    CHATS_DICT[update.effective_chat.id].photo_message = update.effective_message


def delete_prev_message(update, context):
    if update.effective_chat.id not in CHATS_DICT:
        return
    message_id = CHATS_DICT[update.effective_chat.id].prev_message_id
    context.bot.delete_message(chat_id=update.effective_chat.id, message_id=message_id)


def delete_prev_keyboard(update, context):
    if update.effective_chat.id not in CHATS_DICT:
        return
    message_id = CHATS_DICT[update.effective_chat.id].prev_message_id
    context.bot.edit_message_reply_markup(chat_id=update.effective_chat.id,
                                          reply_markup=None, message_id=message_id)


def edit_prev_keyboard(update, context, reply_markup):
    if update.effective_chat.id not in CHATS_DICT:
        return
    message_id = CHATS_DICT[update.effective_chat.id].prev_message_id
    context.bot.edit_message_reply_markup(chat_id=update.effective_chat.id,
                                          reply_markup=reply_markup, message_id=message_id)


def post_item_command_handler(update, context):
    message_text = "‚¨áÔ∏è‚¨áÔ∏è‚¨á Ô∏è–∂–º–∏ –∫–Ω–æ–ø–∫—É ‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è"
    keyboard = [[InlineKeyboardButton(CallbackDataEnum.POSTITEM.value, callback_data=CallbackDataEnum.POSTITEM.name)]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    message = context.bot.send_message(chat_id=update.effective_chat.id,
                                       text=message_text,
                                       reply_markup=reply_markup,
                                       parse_mode=telegram.ParseMode.MARKDOWN)

    save_message_id(update, message)


def post_item_handler(update, context, keyboard_only=False):
    message_text = category_message_text()

    keyboard = [
        [InlineKeyboardButton(CategoryEnum.BICYCLE.value, callback_data=CategoryEnum.BICYCLE.name),
         InlineKeyboardButton(CategoryEnum.COMPONENTS.value, callback_data=CategoryEnum.COMPONENTS.name)],

        [InlineKeyboardButton(CategoryEnum.WHEELS.value, callback_data=CategoryEnum.WHEELS.name),
         InlineKeyboardButton(CategoryEnum.SERVICE.value, callback_data=CategoryEnum.SERVICE.name)],

        [InlineKeyboardButton(CategoryEnum.ACCESSORIES.value, callback_data=CategoryEnum.ACCESSORIES.name),
         InlineKeyboardButton(CategoryEnum.BAGS.value, callback_data=CategoryEnum.BAGS.name)],

        [InlineKeyboardButton(CategoryEnum.CLOTHES.value, callback_data=CategoryEnum.CLOTHES.name),
         InlineKeyboardButton(CategoryEnum.SHOES.value, callback_data=CategoryEnum.SHOES.name),
         InlineKeyboardButton(CategoryEnum.HELMETS.value, callback_data=CategoryEnum.HELMETS.name)]]

    reply_markup = InlineKeyboardMarkup(keyboard)

    if not keyboard_only:
        message = context.bot.send_message(chat_id=update.effective_chat.id,
                                           text=message_text, reply_markup=reply_markup,
                                           parse_mode=telegram.ParseMode.MARKDOWN)

        delete_prev_message(update, context)

        save_message_id(update, message)
    else:
        edit_prev_keyboard(update, context, reply_markup)

    save_current_state(update, UserState.WAITING_FOR_CATEGORY)

    return UserState.WAITING_FOR_CATEGORY


def post_item_category(update, context, category):
    if not isinstance(category, CategoryEnum):
        return ConversationHandler.END

    if category == CategoryEnum.BICYCLE:
        return post_item_bicycle_category(update, context, category)

    if category == CategoryEnum.CLOTHES:
        return post_item_pre_photo(update, context)
    if category == CategoryEnum.SHOES:
        return post_item_pre_photo(update, context)
    if category == CategoryEnum.HELMETS:
        return post_item_pre_photo(update, context)


def post_item_bicycle_category(update, context, category):
    keyboard = [
        [InlineKeyboardButton(BicycleCategoryEnum.ROAD.value, callback_data=BicycleCategoryEnum.ROAD.name),
         InlineKeyboardButton(BicycleCategoryEnum.FIX.value, callback_data=BicycleCategoryEnum.FIX.name)],

        [InlineKeyboardButton(BicycleCategoryEnum.CYCLOCROSS.value, callback_data=BicycleCategoryEnum.CYCLOCROSS.name),
         InlineKeyboardButton(BicycleCategoryEnum.SINGLE.value, callback_data=BicycleCategoryEnum.SINGLE.name)],

        [InlineKeyboardButton(BicycleCategoryEnum.GRAVEL.value, callback_data=BicycleCategoryEnum.GRAVEL.name),
         InlineKeyboardButton(BicycleCategoryEnum.TOURING.value, callback_data=BicycleCategoryEnum.TOURING.name)],

        [InlineKeyboardButton(CallbackDataEnum.BACK.value, callback_data=CallbackDataEnum.BACK.name)]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    edit_prev_keyboard(update, context, reply_markup)

    save_current_state(update, UserState.WAITING_FOR_BICYCLE)

    return UserState.WAITING_FOR_BICYCLE


def post_item_go_back(update, context):
    state = CHATS_DICT[update.effective_chat.id].user_state

    new_state = ConversationHandler.END

    if state == UserState.WAITING_FOR_BICYCLE:
        return post_item_handler(update, context, keyboard_only=True)

    return new_state


def post_item_process_bicycle(update, context, category):
    message_text = photo_message_text()
    message_text = "–¢—ã –≤—ã–±—Ä–∞–ª {}\n{}".format(category.value, message_text)

    # save chosen bicycle category to dictionary
    CHATS_DICT[update.effective_chat.id].choosen_category = category

    message = context.bot.send_message(chat_id=update.effective_chat.id,
                                       text=message_text,
                                       parse_mode=telegram.ParseMode.MARKDOWN)

    save_message_id(update, message)

    return post_item_pre_photo(update, context)


def post_item_pre_photo(update, context):
    message_text = photo_message_text()
    delete_prev_keyboard(update, context)
    message = context.bot.send_message(chat_id=update.effective_chat.id,
                                       text=message_text, parse_mode=telegram.ParseMode.MARKDOWN)

    save_message_id(update, message)

    return UserState.WAITING_FOR_PHOTO


def post_item_process_photo(update, context):
    keyboard = [
        [InlineKeyboardButton(x.value, callback_data=x.name) for x in CurrencyEnum]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    save_photo_message(update)

    message_text = "–í—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç—É\n"
    message = context.bot.send_message(chat_id=update.effective_chat.id, text=message_text, reply_markup=reply_markup)

    save_message_id(update, message)

    return UserState.WAITING_FOR_CURRENCY


def post_item_process_currency(update, context, currency):
    get_chat(update).currency = currency
    message_text = "–í–≤–µ–¥–∏ —Ü–µ–Ω—É –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç–µ *{}*\n".format(CurrencyEnum[currency.name].value)
    delete_prev_message(update, context)
    message = context.bot.send_message(chat_id=update.effective_chat.id,
                                       text=message_text, parse_mode=telegram.ParseMode.MARKDOWN)

    save_message_id(update, message)

    return UserState.WAITING_FOR_PRICE


def post_item_process_price(update, context):
    price = update.effective_message.text
    get_chat(update).price = price

    message_text = """ –£–∫–∞–∂–∏ –¥—Ä—É–∂–∏—à—å –ª–∏ —Ç—ã —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""

    keyboard = [
        [InlineKeyboardButton(x.value, callback_data=x.name) for x in ShippingEnum]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    message = context.bot.send_message(chat_id=update.effective_chat.id, reply_markup=reply_markup,
                                       text=message_text, parse_mode=telegram.ParseMode.MARKDOWN)

    save_message_id(update, message)

    return UserState.WAITING_FOR_SHIP


def post_item_process_ship(update, context, ship):
    get_chat(update).ship = ship

    message_text = "–¢—ã –≤—ã–±—Ä–∞–ª —Ç–∞–∫–æ–π —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: *{}*".format(ship.value)
    send_message(update, context, message_text)

    message_text = """üìç *–ì–æ—Ä–æ–¥.*

–í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ç–æ–≤–∞—Ä. 
–ï—Å–ª–∏ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É *{}*
    """.format(CallbackDataEnum.CITY_OTHER.value)
    delete_prev_keyboard(update, context)

    top_cities = get_top_cities()

    keyboard = []
    counter = 0
    row = []
    for c in top_cities:
        row.append(InlineKeyboardButton(c.title, callback_data=CallbackDataEnum.CITY.name + str(c.id)))
        if counter % 2 == 0:
            keyboard.append(row)
            row = []
        counter += 1

    keyboard.append(
        [InlineKeyboardButton(CallbackDataEnum.CITY_OTHER.value, callback_data=CallbackDataEnum.CITY_OTHER.name)])

    reply_markup = InlineKeyboardMarkup(keyboard)

    message = context.bot.send_message(chat_id=update.effective_chat.id,
                                       text=message_text,
                                       reply_markup=reply_markup,
                                       parse_mode=telegram.ParseMode.MARKDOWN)

    save_message_id(update, message)

    return UserState.WAITING_FOR_CITY


def post_item_process_city(update, context, city):
    get_chat(update).city = city

    message_text = "–¢—ã –≤—ã–±—Ä–∞–ª –≥–æ—Ä–æ–¥ *{}*".format(city.title)
    send_message(update, context, message_text)

    message_text = """‚≠êÔ∏è *–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ.*

–ö–æ—Ä–æ—Ç–∫–æ –Ω–∞–ø–∏—à–∏ –æ —Ç–æ–≤–∞—Ä–µ (–Ω–∞–∑–≤–∞–Ω–∏–µ, –±—Ä–µ–Ω–¥, –º–æ–¥–µ–ª—å, –≥–æ–¥ –∏ —Ç–ø). 
–ù–∞–ø—Ä–∏–º–µ—Ä: _—Å—Ç–∞–ª—å–Ω–æ–π —Ñ—Ä–µ–π–º Fuji Declaration 2018._
    """

    delete_prev_keyboard(update, context)

    send_message(update, context, message_text)

    return UserState.WAITING_FOR_CAPTION


def post_item_process_caption(update, context):
    caption = update.effective_message.text

    if caption == '/cancel':
        return ConversationHandler.END

    # if update.effective_user.username:
    #     description = "@" + update.effective_user.username + "\n" + description

    # get photo for this user and send photo+desc to channel
    # ACTIVE_USERS[update.effective_user]["description"] = description

    CHATS_DICT[update.effective_chat.id].caption = caption

    message_text = """‚ûï *–û–ø–∏—Å–∞–Ω–∏–µ.*

–°–µ–π—á–∞—Å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏ —Å–≤–æ–π —Ç–æ–≤–∞—Ä –≤ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Ñ–æ—Ä–º–µ. 
–ù–∞–ø—Ä–∏–º–µ—Ä: _—Ä–∞–∑–º–µ—Ä 52, —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ö–æ—Ä–æ—à–µ–µ, –µ—Å—Ç—å —Ü–∞—Ä–∞–ø–∏–Ω—ã._
"""
    context.bot.send_message(update.effective_chat.id, message_text, parse_mode=telegram.ParseMode.MARKDOWN)

    return UserState.WAITING_FOR_DESCRIPTION


def build_product_text(update):
    if update.effective_user.username:
        seller_name = update.effective_user.username
    else:
        seller_name = update.effective_user.full_name

    seller = "[{name}](tg://user?id={id})".format(id=update.effective_user.id, name=seller_name)

    chat = get_chat(update)
    text = "*–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:* {caption}\n\n" \
           "*–û–ø–∏—Å–∞–Ω–∏–µ:* {descr}\n\n" \
           "*–ì–æ—Ä–æ–¥:* {city}\n\n" \
           "*–¶–µ–Ω–∞:* {price} {currency}\n\n" \
           "*–ü—Ä–æ–¥–∞–≤–µ—Ü:* {seller}".format(
            caption=chat.caption,
            descr=chat.description,
            city=chat.city.title,
            price=chat.price,
            currency=chat.currency.value,
            seller=seller)

    return text


def post_item_process_description(update, context):
    description = update.effective_message.text

    if description == '/cancel':
        return ConversationHandler.END

    get_chat(update).description = description

    chat = get_chat(update)
    text = build_product_text(update)
    context.bot.send_photo(chat_id=chat.chat_id,
                           photo=chat.photo_message.photo[-1].file_id,
                           caption=text,
                           parse_mode=telegram.ParseMode.MARKDOWN_V2)

    keyboard = [
        [InlineKeyboardButton(CallbackDataEnum.DONE.value, callback_data=CallbackDataEnum.DONE.name),
         InlineKeyboardButton(CallbackDataEnum.CANCEL.value, callback_data=CallbackDataEnum.CANCEL.name)]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    message_text = \
        "–ù–∞–∂–º–∏—Ç–µ {done} –¥–ª—è –ø–æ—Å—Ç–∏–Ω–≥–∞ –Ω–∞ –∫–∞–Ω–∞–ª @{channel} –∏–ª–∏ {cancel} –¥–ª—è –æ—Ç–º–µ–Ω—ã.".format(
            done=CallbackDataEnum.DONE.value,
            cancel=CallbackDataEnum.CANCEL.value,
            channel=_CHANNEL)
    send_message(update, context, message_text, reply_markup)

    return UserState.WAITING_FOR_APPROVE


def post_item_process_approve(update, context):
    chat = get_chat(update)
    text = build_product_text(update)
    context.bot.send_photo(chat_id='@' + _CHANNEL,
                           photo=chat.photo_message.photo[-1].file_id,
                           caption=text,
                           parse_mode=telegram.ParseMode.MARKDOWN_V2)

    message_text = "–¢–æ–≤–∞—Ä —Ä–∞–∑–º–µ—â–µ–Ω –Ω–∞ –∫–∞–Ω–∞–ª–µ @{}.".format(_CHANNEL)
    send_message(update, context, message_text)

    return ConversationHandler.END


def cancel_handler(update, context):
    return ConversationHandler.END


def set_logger_handlers(name):
    now = datetime.datetime.now()
    now = now.strftime("%d_%m_%Y")

    formatter = logging.Formatter('%(levelname)s %(asctime)s %(message)s')
    log_filename = _LOGS_DIR + "/{}_{}_debug.log".format(name, now)
    fh_debug = logging.FileHandler(log_filename)
    fh_debug.setLevel(logging.DEBUG)
    fh_debug.setFormatter(formatter)
    _LOGGER.addHandler(fh_debug)
    global _FH_DEBUG
    _FH_DEBUG = fh_debug


def error(update, context):
    """Log Errors caused by Updates."""
    _LOGGER.warning('Update "%s" caused error "%s"', update, context.error)


if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("give me json with settings as argument!")
        exit(-1)

    settings_filename = sys.argv[1]
    _SETTINGS = Barahl0botSettings(settings_filename)
    _TOKEN_TELEGRAM = _SETTINGS.token_telegram
    _CHANNEL = _SETTINGS.channel
    _DATABASE = Barahl0botDatabase(_CHANNEL)
    _VK_INFO_GETTER = VkontakteInfoGetter(_SETTINGS.token_vk)

    logger_file_name = "{}_{}".format("bot", _CHANNEL)
    set_logger_handlers(logger_file_name)

    updater = Updater(_TOKEN_TELEGRAM, use_context=True)
    dispatcher = updater.dispatcher

    dispatcher.add_handler(CommandHandler('start', start_handler))
    dispatcher.add_handler(CommandHandler('getalbums', get_albums_handler))
    dispatcher.add_handler(CommandHandler('addalbum', add_album_handler))
    dispatcher.add_handler(CommandHandler('removealbum', remove_album_handler))
    dispatcher.add_handler(CommandHandler('postitem', post_item_command_handler))

    back_handler = CallbackQueryHandler(post_item_go_back, pattern='^' + CallbackDataEnum.BACK.name + '$')

    waiting_for_bicycle_h = [CallbackQueryHandler(partial(post_item_process_bicycle, category=x),
                                                  pattern='^' + x.name + '$') for x in BicycleCategoryEnum]
    waiting_for_bicycle_h.append(back_handler)

    top_cities = get_top_cities()

    dispatcher.add_handler(
        ConversationHandler(
            entry_points=[
                CallbackQueryHandler(post_item_handler, pattern=('^' + CallbackDataEnum.POSTITEM.name + '$'))],
            states={
                UserState.WAITING_FOR_CATEGORY:
                    [CallbackQueryHandler(partial(post_item_category, category=x),
                                          pattern='^' + x.name + '$') for x in CategoryEnum],
                UserState.WAITING_FOR_BICYCLE: waiting_for_bicycle_h,
                UserState.WAITING_FOR_PHOTO: [MessageHandler(
                    callback=post_item_process_photo, filters=Filters.photo)],
                UserState.WAITING_FOR_CURRENCY:
                    [CallbackQueryHandler(partial(post_item_process_currency, currency=x),
                                          pattern='^' + x.name + '$') for x in CurrencyEnum],
                UserState.WAITING_FOR_PRICE: [MessageHandler(
                    callback=post_item_process_price, filters=Filters.text)],
                UserState.WAITING_FOR_SHIP:
                    [CallbackQueryHandler(partial(post_item_process_ship, ship=x),
                                          pattern='^' + x.name + '$') for x in ShippingEnum],
                UserState.WAITING_FOR_CITY:
                    [CallbackQueryHandler(partial(post_item_process_city, city=x),
                                          pattern='^' + CallbackDataEnum.CITY.name + str(x.id) + '$') for x in
                     top_cities],
                UserState.WAITING_FOR_CAPTION: [MessageHandler(
                    callback=post_item_process_caption, filters=Filters.text)],
                UserState.WAITING_FOR_DESCRIPTION: [MessageHandler(
                    callback=post_item_process_description, filters=Filters.text)],
                UserState.WAITING_FOR_APPROVE:
                    [CallbackQueryHandler(post_item_process_approve, pattern='^' + CallbackDataEnum.DONE.name + '$')]
            },
            fallbacks=[CommandHandler('cancel', cancel_handler)],
            per_message=False)
    )

    dispatcher.add_error_handler(error)

    updater.start_polling()
    updater.idle()
